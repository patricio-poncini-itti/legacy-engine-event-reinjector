import csv
import json
import boto3
import uuid
from botocore.exceptions import ClientError

INPUT_FILE = 'output_data.csv'  # The output file generated by the get_records.py script
SQS_QUEUE_URL = 'url-of-the-sqs'
AWS_REGION = 'your-aws-region'

# Initialize the SQS client
sqs_client = boto3.client('sqs', region_name=AWS_REGION)


def publish_to_sqs(message_dict):
    """
    This function publishes a message to an SQS FIFO queue.
    """
    try:
        group_id = message_dict.get('idempotencyKey')

        if not group_id:
            print(f"‚ùå Error: 'idempotencyKey' not found or is null in the message. Skipping...")
            return False

        # Print event as JSON in console
        print(json.dumps(message_dict, indent=4, ensure_ascii=False))

        deduplication_id = str(uuid.uuid4())
        message_body = json.dumps(message_dict)

        response = sqs_client.send_message(
            QueueUrl=SQS_QUEUE_URL,
            MessageBody=message_body,
            MessageGroupId=group_id,
            MessageDeduplicationId=deduplication_id
        )
        print(f"‚úÖ Message sent to SQS for PK {group_id}. MessageId: {response['MessageId']}")
        return True

    except ClientError as e:
        print(f"‚ùå Error sending to SQS for PK {group_id}: {e.response['Error']['Message']}")
        return False
    except KeyError:
        print(f"‚ùå Error: 'idempotencyKey' not found in the CSV file's JSON.")
        return False


def main():
    """
    Main function that reads the CSV and publishes its content directly to SQS.
    """
    print(f"Starting process to send to SQS from file '{INPUT_FILE}'...")

    try:
        with open(INPUT_FILE, mode='r', encoding='utf-8') as infile:
            reader = csv.reader(infile)
            header = next(reader)

            for row in reader:
                pk_read = row[0]
                json_string_read = row[1]

                try:
                    message_to_send = json.loads(json_string_read)
                    publish_to_sqs(message_to_send)

                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è  Skipping row for PK {pk_read} because the body is not valid JSON.")
                except Exception as e:
                    print(f"üö® Unexpected error processing PK {pk_read}: {e}")

    except FileNotFoundError:
        print(f"üö® Error: Input file not found at '{INPUT_FILE}'.")
        return

    print("\nProcess finished.")


if __name__ == '__main__':
    main()